datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../dist"
}

// REF: https://github.com/unlight/prisma-nestjs-graphql#decorate
generator nestgraqhpl {
  provider               = "prisma-nestjs-graphql"
  tsConfigFilePath       = "tsconfig.nestgraphql.json"
  output                 = "../dist/graphql"
  emitSingle             = true
  emitCompiled           = true
  purgeOutput            = false
  fields_Validator_from  = "class-validator"
  fields_Validator_input = true
  decorate_1_type        = "CreateOneUserArgs"
  decorate_1_field       = data
  decorate_1_name        = ValidateNested
  decorate_1_from        = "class-validator"
  decorate_1_arguments   = "[]"
  decorate_2_type        = "CreateOneUserArgs"
  decorate_2_field       = data
  decorate_2_from        = "class-transformer"
  decorate_2_arguments   = "['() => {propertyType.0}']"
  decorate_2_name        = Type
}

enum UserRole {
  GENERAL
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BANNED
  NOT_CONFIRMED
}

model User {
  /// @Field(() => ID)
  id                       String         @id @default(uuid()) @db.Uuid
  /// @Field(() => String)
  role                     UserRole       @default(GENERAL)
  /// @Validator.@IsEmail()
  email                    String         @unique
  /// @HideField()
  password                 String
  /// @HideField({ output: false, input: true })
  status                   UserStatus     @default(NOT_CONFIRMED)
  /// @HideField({ output: true, input: true })
  createdAt                DateTime       @default(now())
  /// @HideField({ output: true, input: true })
  updatedAt                DateTime       @updatedAt
  /// @HideField({ output: true, input: false })
  signUpConfirmedAt        DateTime?
  /// @HideField({ output: true, input: true })
  signUpConfirmationSentAt DateTime?
  /// @HideField({ output: true, input: true })
  signUpConfirmationToken  String?
  /// @HideField({ output: true, input: true })
  RefreshToken             RefreshToken[]
}

model RefreshToken {
  /// @HideField({ output: false, input: true })
  id        String   @default(uuid()) @db.Uuid
  /// @HideField({ output: true, input: true })
  token     String
  /// @HideField({ output: true, input: true })
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  /// @HideField({ output: true, input: true })
  userId    String   @db.Uuid
  /// @HideField({ output: true, input: true })
  createdAt DateTime @default(now())
  /// @HideField({ output: true, input: true })
  updatedAt DateTime @updatedAt
  /// @HideField({ output: true, input: true })
  expiresIn DateTime

  @@id([id, userId])
}
